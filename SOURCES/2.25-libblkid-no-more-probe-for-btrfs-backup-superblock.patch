diff -up util-linux-2.23.2/libblkid/src/blkidP.h.kzak util-linux-2.23.2/libblkid/src/blkidP.h
--- util-linux-2.23.2/libblkid/src/blkidP.h.kzak	2013-07-30 10:39:26.205738229 +0200
+++ util-linux-2.23.2/libblkid/src/blkidP.h	2014-01-23 10:51:10.109593273 +0100
@@ -224,9 +224,6 @@ struct blkid_struct_probe
 
 /* private per-probing flags */
 #define BLKID_PROBE_FL_IGNORE_PT (1 << 1)	/* ignore partition table */
-#define BLKID_PROBE_FL_IGNORE_BACKUP (1 << 2)	/* ignore backup superblocks or PT */
-
-extern int blkid_probe_ignore_backup(blkid_probe pr);
 
 extern blkid_probe blkid_clone_probe(blkid_probe parent);
 extern blkid_probe blkid_probe_get_wholedisk_probe(blkid_probe pr);
diff -up util-linux-2.23.2/libblkid/src/probe.c.kzak util-linux-2.23.2/libblkid/src/probe.c
--- util-linux-2.23.2/libblkid/src/probe.c.kzak	2013-07-30 10:39:26.208738259 +0200
+++ util-linux-2.23.2/libblkid/src/probe.c	2014-01-23 10:51:10.109593273 +0100
@@ -924,7 +924,8 @@ int blkid_do_probe(blkid_probe pr)
  *
  * This function erases the current signature detected by @pr. The @pr has to
  * be open in O_RDWR mode, BLKID_SUBLKS_MAGIC or/and BLKID_PARTS_MAGIC flags
- * has to be enabled.
+ * has to be enabled (if you want to errase also superblock with broken check
+ * sums then use BLKID_SUBLKS_BADCSUM too).
  *
  * After successful signature removing the @pr prober will be moved one step
  * back and the next blkid_do_probe() call will again call previously called
@@ -1125,8 +1126,6 @@ int blkid_do_safeprobe(blkid_probe pr)
 
 	blkid_probe_start(pr);
 
-	pr->prob_flags |= BLKID_PROBE_FL_IGNORE_BACKUP;
-
 	for (i = 0; i < BLKID_NCHAINS; i++) {
 		struct blkid_chain *chn;
 
@@ -1764,8 +1763,3 @@ void blkid_probe_use_wiper(blkid_probe p
 		blkid_probe_chain_reset_vals(pr, chn);
 	}
 }
-
-int blkid_probe_ignore_backup(blkid_probe pr)
-{
-	return pr && (pr->prob_flags & BLKID_PROBE_FL_IGNORE_BACKUP);
-}
diff -up util-linux-2.23.2/libblkid/src/superblocks/btrfs.c.kzak util-linux-2.23.2/libblkid/src/superblocks/btrfs.c
--- util-linux-2.23.2/libblkid/src/superblocks/btrfs.c.kzak	2013-06-13 09:46:10.421650630 +0200
+++ util-linux-2.23.2/libblkid/src/superblocks/btrfs.c	2014-01-23 10:51:10.109593273 +0100
@@ -63,11 +63,6 @@ static int probe_btrfs(blkid_probe pr, c
 {
 	struct btrfs_super_block *bfs;
 
-	if (mag->kboff > 64 && blkid_probe_ignore_backup(pr)) {
-		DBG(LOWPROBE, blkid_debug("btrfs: found backup superblock, ignore"));
-		return 1;
-	}
-
 	bfs = blkid_probe_get_sb(pr, mag, struct btrfs_super_block);
 	if (!bfs)
 		return -1;
@@ -92,8 +87,6 @@ const struct blkid_idinfo btrfs_idinfo =
 	.magics		=
 	{
 	  { .magic = "_BHRfS_M", .len = 8, .sboff = 0x40, .kboff = 64 },
-	  { .magic = "_BHRfS_M", .len = 8, .sboff = 0x40, .kboff = 64 * 1024 },
-	  { .magic = "_BHRfS_M", .len = 8, .sboff = 0x40, .kboff = 256 * 1024 * 1024 },
 	  { NULL }
 	}
 };
